using UnityEngine;

namespace Yang.Net.Tcp.Sync
{
    public class Heartbeat : MonoBehaviour
    {
        private void Start()
        {
            #region 客户端主动断开连接

            // -------------------- 问题：
            // 当在客户端主动退出时，会调用socket的 Shutdown和Close 方法
            // 但是通过调用这两个方法，服务器无法得知客户端已经主动断开

            // -------------------- 解决方案
            // ---------- 方法一：
            // 尝试使用Socket提供Disconnect方法主动断开连接，需要修改以下内容：
            // 客户端：
            // 1，主动断开连接
            // 服务器：
            // 1，收发消息时判断socket是否已经断开
            // 2，处理删除记录的socket的相关逻辑（会用到线程锁）

            // ---------- 方法二：（常用）
            // 自定义退出消息
            // 让服务器收到该消息就知道是客户端想要主动断开
            // 然后让服务器处理释放socket相关工作

            // -------------------- 总结：
            // 客户端可以通过Disconnect方法主动和服务器断开连接
            // 服务器可以通过Connect属性判断连接状态决定是否释放socket

            // 但是由于服务器Connected变量表示的是上一次收发消息是否成功
            // 所以服务器无法准确判断客户端的连接状态
            // 因此，需要自己定义一条退出消息，用于通知服务器，准确的断开和客户端的连接

            #endregion

            #region 什么是心跳消息？

            // 所谓心跳消息，就是在长连接中，客户端和服务器之间定期发送的一种特殊的数据包
            // 用于通知对方自己还在线，以确保长连接的有效性

            // 由于其发送的时间间隔往往是固定且持续的，就像是心跳一样一直存在，所以称之为心跳消息

            #endregion

            #region 为什么需要心跳消息？

            // 1，避免非正常关闭客户端，服务器无法正常收到关闭连接消息
            //    通过心跳消息我们可以自定义判断超时，如果超时没有收到客户端消息，证明客户端已经断开连接
            // 2，避免客户端长期不发送消息，防火墙或者路由器会断开连接，我们可以通过心跳消息一直保持活跃状态

            #endregion

            #region 实现心跳消息

            // 客户端：定时发送消息
            // 服务器：不停的检测上次收到客户端的时间，如果超时就认为链接已经断开

            #endregion
        }
    }
}
namespace Yang.CSharp.Notes
{
    // 区别概述：
    // 结构体和类最大的区别是存储空间上，因为结构体是值，类是引用
    // 因此，结构存于栈，类存于堆
    
    // 结构体和类在使用上很类似，结构体甚至可以用面向对象的思想来形容一类对象
    // 结构体具备着面向对象思想中封装的特性，但是它不具备继承和多态的特性，因此大大减少了使用率
    // 由于结构体不具备继承的特性，所以不能被 protected 修饰
    
    
    // 细节区别：
    // 1， 结构体是值类型，类是引用类型
    // 2， 结构体存在栈中，类存在堆中
    // 3， 结构体成员不能使用 protected修饰，类可以
    // 4， 结构体成员变量声明不能指定初始值，类可以
    // 5， 结构体不能声明无参构造函数，类可以
    // 6， 结构体声明有参构造函数后，无参构造函数不会被顶掉
    // 7， 结构体不能声明析构函数，类可以
    // 8， 结构体不能被继承，类可以
    // 9， 结构体需要在构造函数中初始化所有成员变量，类随意
    // 10，结构体不能被 static修饰（不存在静态结构），类可以
    // 11，结构体不能在自己内部声明和自己一样的结构体变量，类可以
    
    
    // 结构体特别之处：
    // 结构体可以继承接口，因为接口是行为的抽象
    
    
    // 如何选择：
    // 1，想要用继承和多态时，直接淘汰结构体。比如玩家，怪物等
    // 2，对象是数据集合时，优先考虑结构体。比如位置，坐标等
    // 3，从值类型和引用类型赋值的区别上考虑。
    //    比如经常被传递的对象，并且经常改变赋值对象，原对象不想跟着变化时，用结构体。比如坐标，向量，旋转等

    internal class Notes_StructAndClass
    {
        private static void Main(string[] args)
        {
        }
    }
}